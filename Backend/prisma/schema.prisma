generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  username    String
  password    String
  accountType String   @default("LEARNER") @map("account_type")
  Learner     Learner?

  @@unique([username])
  @@map("users")
}

model Learner {
  id   Int  @id
  User User @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  TypeLearner   TypeLearner? @relation(fields: [typeLearnerId], references: [id])
  typeLearnerId Int?         @map("type_learner_id")

  LatestCourseInSequenceCourses Course? @relation(fields: [latestCourseInSequenceId], references: [id])
  latestCourseInSequenceId      Int?    @map("latest_course_in_sequence_id")

  RegisterCourses      RegisterCourse[]
  HistoryStudiedCourse HistoryStudiedCourse[]
  HistoryStudiedQuiz   HistoryStudiedQuiz[]
  TemporaryCart        Cart[]

  @@map("learners")
}

model TypeLearner {
  id             Int              @id @default(autoincrement())
  name           String
  SequenceCourse SequenceCourse[]
  startScore     Float            @map("start_score")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @map("updated_at")
  Learner        Learner[]

  @@unique([name])
  @@map("type_learners")
}

model Course {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")
  avatarId     Int?       @map("avatar_id")
  name         String
  description  String
  price        Int?
  salePercent  Float?     @default(0) @map("sale_percent")
  labels       String[]
  totalLessons Int        @default(0) @map("total_lessons")
  totalTopics  Int        @default(0) @map("total_topics")
  amountOfTime Int        @default(180) // caculate in minutes
  visibility   Boolean    @default(true)
  level        LevelType?
  passPercent  Float      @default(0.8) @map("pass_percent")

  SequenceCourse SequenceCourse[]
  Learner        Learner[]
  Topic          Topic[]
  RegisterCourse RegisterCourse[]
  Cart           Cart[]

  @@map("courses")
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  Courses   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId  Int      @map("course_Id")
  Learner   Learner  @relation(fields: [learnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  learnerId Int      @map("learner_id")

  @@unique([learnerId, courseId])
  @@map("carts")
}

model Topic {
  id           Int    @id @default(autoincrement())
  Course       Course @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId     Int    @map("course_id")
  name         String
  order        Int
  totalLessons Int    @default(0) @map("total_lessons")

  Lessons Lesson[]

  @@unique([courseId, name])
  @@map("topics")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  order     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  LearningMaterial   LearningMaterial? @relation(fields: [learningMaterialId], references: [id])
  learningMaterialId Int?              @map("learning_material_id")

  Topic                Topic                  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId              Int                    @map("topic_id")
  HistoryStudiedCourse HistoryStudiedCourse[]

  @@unique([topicId, title])
  @@map("lessons")
}

model LearningMaterial {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @default(now()) @map("updated_at")
  filepath  String?
  mimetype  String?
  type      LearningMaterialType

  Lesson             Lesson[]
  Quiz               Quiz[]
  HistoryStudiedQuiz HistoryStudiedQuiz[]

  @@map("learning_materials")
}

model Quiz {
  id               Int
  LearningMaterial LearningMaterial @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  index                Int                    @default(0)
  question             String
  answers              String[]
  correctAnswer        Int                    @map("correct_answer")
  ResultOfStudyingQuiz ResultOfStudyingQuiz[]

  @@unique([id, index])
  @@map("quizes")
}

model RegisterCourse {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  Learner   Learner? @relation(fields: [learnerId], references: [id], onUpdate: Cascade)
  learnerId Int?     @map("learner_id")

  Course   Course? @relation(fields: [courseId], references: [id], onUpdate: Cascade)
  courseId Int?    @map("course_id")

  percentOfStudying Float @default(0) @map("percent_of_studying")

  @@unique([learnerId, courseId])
  @@map("register_courses")
}

model HistoryStudiedCourse {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")

  Learner   Learner @relation(fields: [learnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  learnerId Int     @map("learner_id")

  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId Int

  @@unique([lessonId, learnerId])
  @@map("history_studied_course")
}

model HistoryStudiedQuiz {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) @map("created_at")
  score         Int      @default(0)
  totalQuestion Int      @default(0)

  Learner   Learner @relation(fields: [learnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  learnerId Int     @map("learner_id")

  LearningMaterail   LearningMaterial @relation(fields: [learningMaterialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  learningMaterialId Int              @map("learning_material_id")

  ResultOfStudyingQuiz ResultOfStudyingQuiz[]

  @@map("history_studied_quiz")
}

model ResultOfStudyingQuiz {
  HistoryStudiedQuiz   HistoryStudiedQuiz @relation(fields: [historyStudiedQuizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  historyStudiedQuizId Int

  Quiz      Quiz @relation(fields: [quizId, quizIndex], references: [id, index])
  quizId    Int
  quizIndex Int

  answer Int

  @@unique([historyStudiedQuizId, quizId, quizIndex])
  @@map("result_of_studying_quiz")
}

model SequenceCourse {
  id            Int         @id @default(autoincrement())
  TypeLearner   TypeLearner @relation(fields: [typeLearnerId], references: [id])
  typeLearnerId Int         @map("type_learner_id")
  order         Int

  Course   Course @relation(fields: [courseId], references: [id])
  courseId Int    @map("course_id")

  @@unique([typeLearnerId, courseId, order])
  @@map("sequence_course")
}

model IntroQuestion {
  id       Int      @id @default(autoincrement())
  question String
  answers  String[]
  scores   Int[]
  order    Int

  @@map("intro_question")
}

enum LearningMaterialType {
  PDF
  QUIZ
  VIDEO
  IMAGE
}

enum LevelType {
  BEGINNER
  INTERMEDIAN
  EXPERT
}

enum AccountType {
  ADMIN
  LEARNER
}

enum GenderType {
  MALE
  FEMALE
  UNKNOWN
}
