generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthenticatedUser {
  id               Int                @id @default(autoincrement())
  avatar           String?
  email            String
  name             String?
  birth            BigInt?
  gender           GenderType?        @default(UNKNOWN)
  language         String?
  password         String
  username         String             @unique
  refeshToken      String?            @map("refesh_token")
  state            Boolean?           @default(true)
  lastLogin        BigInt             @map("last_login")
  lastLogout       BigInt             @map("last_logout")
  accountType      AccountType
  Framework        Framework[]
  createdAt        DateTime           @default(now()) @map("created_at")
  Course           Course[]
  Dataset          Dataset[]
  Forum            Forum[]
  LoginHistory     LoginHistory[]
  Learner          Learner?
  LearningMaterial LearningMaterial[]
  Model            Model[]
  Notebook         Notebook[]
  Permission       Permission[]
  Role             Role[]
  Statement        Statement[]

  @@map("authenticated_user")
}

model LoginHistory {
  id        Int               @id @default(autoincrement())
  userId    Int
  loginTime DateTime          @default(now()) @map("login_time")
  User      AuthenticatedUser @relation(fields: [userId], references: [id])

  @@map("history_login")
}

model HistoryAccessForum {
  createdAt  DateTime @default(now()) @map("created_at")
  forumId    Int      @map("forum_id")
  accessTime Int      @default(1) @map("access_time")
  Forum      Forum    @relation(fields: [forumId], references: [id])

  @@unique([createdAt, forumId])
  @@map("history_access_forum")
}

model Learner {
  activeReflective    Int?                     @map("active_reflective")
  sensitiveIntuitive  Int?                     @map("sensitive_intuitive")
  visualVerbal        Int?                     @map("visual_verbal")
  sequentialGlobal    Int?                     @map("sequential_global")
  backgroundKnowledge BackgroundKnowledgeType? @map("background_knowledge")
  qualification       QualificationType?
  id                  Int                      @unique @map("user_id")
  HistoryOfCourse     HistoryOfCourse[]
  log                 LearnerLog[]
  user                AuthenticatedUser        @relation(fields: [id], references: [id])
  LearningGraphNode   LearningGraphNode[]
  LearningPath        LearningPath[]
  Practice            Practice[]
  RegisterCourse      RegisterCourse[]

  @@map("learners")
}

model LearningMaterial {
  id                Int                  @id @default(autoincrement())
  name              String?
  difficulty        Float
  type              LearningMaterialType
  rating            Float
  score             Float                @default(10)
  time              Float?
  topicId           Int                  @map("topic_id")
  lessonId          Int?
  creatorId         Int?                 @map("creator_id")
  exerciseId        Int?
  otherId           Int?
  percentOfPass     Float                @default(80)
  LearnerLog        LearnerLog[]
  LearningGraphNode LearningGraphNode[]
  Creator           AuthenticatedUser?   @relation(fields: [creatorId], references: [id])
  Exercise          Exercise?            @relation(fields: [exerciseId], references: [id])
  Lesson            Lesson?              @relation(fields: [lessonId], references: [id])
  Other             Other?               @relation(fields: [otherId], references: [id])
  Topic             Topic                @relation(fields: [topicId], references: [id])
  LearningPath      LearningPath[]

  @@map("learning_materials")
}

model LearningGraphNode {
  id                     Int              @id @default(autoincrement())
  learnerId              Int              @map("learner_id")
  learningMaterialId     Int              @map("learning_material_id")
  prioLearningMaterialId Int?             @default(0) @map("prio_learning_material_id")
  layer                  Int
  Learner                Learner          @relation(fields: [learnerId], references: [id])
  LearningMaterial       LearningMaterial @relation(fields: [learningMaterialId], references: [id])

  @@unique([learnerId, learningMaterialId])
  @@map("learning_graph_nodes")
}

model Course {
  id              Int                     @id @default(autoincrement())
  idInstructor    Int                     @map("id_instructor")
  name            String
  visibility      Boolean
  description     String
  amountOfTime    Int                     @default(0) @map("amount_of_time")
  level           BackgroundKnowledgeType
  createdAt       DateTime                @default(now()) @map("created_at")
  updatedAt       DateTime                @default(now()) @map("updated_at")
  rating          Float                   @default(5) @map("rating")
  Instructor      AuthenticatedUser       @relation(fields: [idInstructor], references: [id])
  HistoryOfCourse HistoryOfCourse[]
  Lesson          Lesson[]
  RegisterCourse  RegisterCourse[]

  @@map("courses")
}

model Lesson {
  id               Int                @id @default(autoincrement())
  title            String
  amountOfTime     Int                @default(0) @map("amount_of_time")
  visibility       Boolean            @default(true)
  courseId         Int
  HistoryOfCourse  HistoryOfCourse[]
  LearningMaterial LearningMaterial[]
  Course           Course             @relation(fields: [courseId], references: [id])

  @@map("lessons")
}

model Topic {
  id               Int                @id @default(autoincrement())
  title            String
  subject          SubjectType
  LearningMaterial LearningMaterial[]
  EndLink          TopicLink[]        @relation("end_link")
  StartLink        TopicLink[]        @relation("start_link")

  @@map("topics")
}

model TopicLink {
  id      Int     @id @default(autoincrement())
  state   Boolean @default(true)
  startId Int?    @map("start_id")
  endId   Int?    @map("end_id")
  end     Topic?  @relation("end_link", fields: [endId], references: [id])
  start   Topic?  @relation("start_link", fields: [startId], references: [id])

  @@unique([startId, endId])
  @@map("topic_link")
}

model Exercise {
  id               Int                @id @default(autoincrement())
  codeId           Int?
  quizId           Int?
  code             Code?              @relation(fields: [codeId], references: [id])
  quiz             Quiz?              @relation(fields: [quizId], references: [id])
  LearningMaterial LearningMaterial[]
  Practice         Practice[]

  @@map("exercises")
}

model Other {
  id               Int                @id @default(autoincrement())
  fileId           Int
  content          String?            @default("")
  LearningMaterial LearningMaterial[]
  file             File               @relation(fields: [fileId], references: [id])

  @@map("others")
}

model Code {
  id          Int        @id @default(autoincrement())
  question    String
  exampleCode String     @default("") @map("example_code")
  truthCode   String     @default("") @map("truth_code")
  Exercise    Exercise[]
  inputFile   File[]     @relation("input_file")
  outputFile  File[]     @relation("output_file")

  @@map("codes")
}

model Quiz {
  id               Int        @id @default(autoincrement())
  duration         BigInt
  shuffleQuestions Boolean    @map("shuffle_question")
  Exercise         Exercise[]
  question         Question[]

  @@map("quizes")
}

model Question {
  id      Int      @id @default(autoincrement())
  content String
  quizId  Int?
  choice  Answer[]
  Quiz    Quiz?    @relation(fields: [quizId], references: [id])

  @@map("questions")
}

model Answer {
  id          Int       @id @default(autoincrement())
  content     String
  correctness Boolean
  questionId  Int?
  Question    Question? @relation(fields: [questionId], references: [id])

  @@map("answers")
}

model Practice {
  id         Int      @id @default(autoincrement())
  attempt    Int
  answer     String
  language   String
  learnerId  Int      @map("learner_id")
  exerciseId Int      @map("exercise_id")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  learner    Learner  @relation(fields: [learnerId], references: [id])

  @@map("practices")
}

model LearnerLog {
  id                           Int              @id @default(autoincrement())
  learningMaterialVisittedTime BigInt           @map("learning_material_visitted_time")
  learningMaterialRating       Int              @map("learning_material_rating")
  score                        Float?
  time                         Float?
  attempts                     Int
  learningMaterialId           Int              @map("learning_material_id")
  learnerId                    Int?             @map("learner_id")
  state                        Boolean          @default(true)
  createdAt                    DateTime         @default(now()) @map("created_at")
  learner                      Learner?         @relation(fields: [learnerId], references: [id])
  learningMaterial             LearningMaterial @relation(fields: [learningMaterialId], references: [id])

  @@unique([learningMaterialId, learnerId, state, createdAt])
  @@map("learner_logs")
}

model LearningPath {
  id                    Int              @id @default(autoincrement())
  isActive              Boolean          @default(true) @map("is_active")
  learningMaterialOrder Int              @map("learning_material_order")
  learned               Boolean
  learningMaterialId    Int
  learnerId             Int?
  learner               Learner?         @relation(fields: [learnerId], references: [id])
  learningMaterial      LearningMaterial @relation(fields: [learningMaterialId], references: [id])

  @@map("learning_paths")
}

model Forum {
  id                 Int                  @id @default(autoincrement())
  title              String
  label              String[]
  content            String
  coverImageType     String?              @map("cover_image_type")
  createdAt          DateTime             @default(now()) @map("created_at")
  readTimes          Int                  @default(0) @map("read_times")
  shortDescription   String?              @map("short_description")
  updatedAt          DateTime             @default(now()) @map("updated_at")
  userId             Int?                 @map("user_id")
  authenticatedUser  AuthenticatedUser?   @relation(fields: [userId], references: [id])
  HistoryAccessForum HistoryAccessForum[]
  statements         Statement[]

  @@map("forums")
}

model Statement {
  id                Int               @id @default(autoincrement())
  content           String
  forumId           Int               @map("forum_id")
  statementId       Int?              @map("statement_id")
  updatedAt         DateTime          @default(now()) @map("updated_at")
  userId            Int               @map("user_id")
  forum             Forum             @relation(fields: [forumId], references: [id])
  preStatement      Statement?        @relation("pre_order", fields: [statementId], references: [id])
  Statement         Statement[]       @relation("pre_order")
  authenticatedUser AuthenticatedUser @relation(fields: [userId], references: [id])

  @@map("statements")
}

model Role {
  id                  Int                @id @default(autoincrement())
  role                String
  authenticatedUserId Int?               @map("authenticated_user_id")
  AuthenticatedUser   AuthenticatedUser? @relation(fields: [authenticatedUserId], references: [id])

  @@map("roles")
}

model Permission {
  id                  Int                @id @default(autoincrement())
  permission          String
  authenticatedUserId Int?               @map("authenticated_user_id")
  AuthenticatedUser   AuthenticatedUser? @relation(fields: [authenticatedUserId], references: [id])

  @@map("permissions")
}

model Dataset {
  id                Int                   @id @default(autoincrement())
  description       String?
  userId            Int                   @map("authenticated_user_id")
  detail            String?
  downloadCount     Int                   @default(0) @map("download_count")
  filesType         String[]              @map("files_type")
  isPublic          Boolean
  labels            String[]
  title             String
  updatedAt         DateTime              @default(now()) @map("updated_at")
  votes             Int                   @default(0)
  authenticatedUser AuthenticatedUser     @relation(fields: [userId], references: [id])
  notebooks         DatasetsOfNotebooks[]

  @@map("datasets")
}

model Model {
  id                Int               @id @default(autoincrement())
  description       String?
  detail            String?
  downloadCount     Int               @default(0) @map("download_count")
  isPublic          Boolean           @map("is_public")
  labels            String[]
  title             String
  updatedAt         DateTime          @default(now()) @map("updated_at")
  userId            Int               @map("user_id")
  votes             Int               @default(0)
  modelVariations   ModelVariation[]
  authenticatedUser AuthenticatedUser @relation(fields: [userId], references: [id])

  @@map("models")
}

model ModelVariation {
  id          Int                          @id @default(autoincrement())
  filesType   String[]                     @map("files_type")
  framework   Framework
  slugName    String                       @map("slug_name")
  version     Int
  description String?
  modelId     Int                          @map("model_id")
  exampleUse  String?                      @map("example_use")
  updatedAt   DateTime                     @default(now()) @map("updated_at")
  model       Model                        @relation(fields: [modelId], references: [id])
  notebooks   ModelVariationsOfNotebooks[]

  @@map("model_variation")
}

model Notebook {
  id                Int                          @id @default(autoincrement())
  title             String
  labels            String[]
  userId            Int                          @map("user_id")
  isPublic          Boolean                      @map("is_public")
  updatedAt         DateTime                     @default(now()) @map("updated_at")
  votes             Int                          @default(0)
  content           String[]
  datasets          DatasetsOfNotebooks[]
  modelVariations   ModelVariationsOfNotebooks[]
  authenticatedUser AuthenticatedUser            @relation(fields: [userId], references: [id])

  @@map("notebook")
}

model DatasetsOfNotebooks {
  datasetId  Int      @map("dataset_id")
  notebookId Int      @map("notebook_id")
  dataset    Dataset  @relation(fields: [datasetId], references: [id])
  notebook   Notebook @relation(fields: [notebookId], references: [id])

  @@id([datasetId, notebookId])
  @@map("datasets_of_notebooks")
}

model ModelVariationsOfNotebooks {
  modelVariationId Int            @map("model_variation_id")
  notebookId       Int            @map("notebook_id")
  modelVariation   ModelVariation @relation(fields: [modelVariationId], references: [id])
  notebook         Notebook       @relation(fields: [notebookId], references: [id])

  @@id([modelVariationId, notebookId])
  @@map("model_variations_of_notebooks")
}

model File {
  id         Int     @id @default(autoincrement())
  name       String
  prefix     String
  state      Boolean @default(true)
  type       String?
  Other      Other[]
  CodeInput  Code[]  @relation("input_file")
  CodeOutput Code[]  @relation("output_file")

  @@map("files")
}

model RegisterCourse {
  id           Int      @id @default(autoincrement())
  learnerId    Int
  courseId     Int
  registerDate DateTime @default(now()) @map("register_date")
  course       Course   @relation(fields: [courseId], references: [id])
  learner      Learner  @relation(fields: [learnerId], references: [id])

  @@unique([learnerId, courseId])
  @@map("register_courses")
}

model HistoryOfCourse {
  learnerId                   Int      @map("learner_id")
  courseId                    Int      @map("course_id")
  lastestLessonId             Int?     @map("lastest_lesson_id")
  lastestLessonMinuteComplete Float?   @default(0) @map("lastest_lesson_minute_complete")
  percentComplete             Float?   @default(0) @map("percent_complete")
  lastestStudyTime            DateTime @default(now()) @map("lastest_study_time")
  course                      Course   @relation(fields: [courseId], references: [id])
  lastestLesson               Lesson?  @relation(fields: [lastestLessonId], references: [id])
  learner                     Learner  @relation(fields: [learnerId], references: [id])

  @@unique([learnerId, courseId])
  @@map("history_of_courses")
}

enum LearningMaterialType {
  PDF
  VIDEO
  QUIZ
  WORD
  CODE
  PPT
  QUIZZ
}

enum AccountType {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum GenderType {
  MALE
  FEMALE
  UNKNOWN
}

enum BackgroundKnowledgeType {
  BASIC
  INTERMEDIATE
  EXPERT
}

enum QualificationType {
  HIGHSCHOOL
  GRADUATE
  UNDERGRADUATE
}

enum SubjectType {
  FUNDAMENTALS
  DATA_SCIENTIST
  MACHINE_LEARNING
  DEEP_LEARNING
  DATA_ENGINEER
  BIG_DATA_ENGINEER
}

enum Framework {
  TENSORFLOW_2
  KERAS
  PYTORCH
  TRANSFORMERS
  GEMMA_CPLUSPLUS
  TENSORRT_LLM
  TENSORFLOW_LITE
  MAXTEXT
  PAX
  FLAX
  JAX
  GGML
  GGUF
  TENSORFLOW_1
  TENSORFLOWDOTJS
  CORAL
  SCIKIT_LEARN
  MXNET
  ONNX
  OTHER
}
